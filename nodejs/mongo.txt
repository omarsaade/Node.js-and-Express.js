CRUD  =>  Create  Read Update Delete

const express = require("express");
const path = require("path");
//connect database and node
const MongoClient = require("mongodb").MongoClient;

const app = express();
//                                                             result
MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
  console.log("connected to database");
  let db = client.db();
  client.close();
});
app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  res.render("index");
});

app.listen(3000, () => console.log("server listen on port 3000"));



==========================





                         Create

const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//connect database and node
const MongoClient = require("mongodb").MongoClient;
const app = express();

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  res.render("index");
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      .insertOne({
        name: req.body.name,
        age: +req.body.age,
      })
      .then((result) => {
        // console.log(result);
        res.redirect("/");
      });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));



bel insert one btwadilo object wahde , bas bel insert many betwadilo 
array of objects



--------------------------------------------------------

app.js





const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//connect database and node
const MongoClient = require("mongodb").MongoClient;
//mesta3mla iza badna njib object m3ayan
// const ObjectId = require("mongodb").ObjectId;
const app = express();

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

// For reading
app.get("/", (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      //filter
      .findOne()
      // .find(
      // {
      // age: 20,
      //  _id: new ObjectId("636e99b956e396a4bc67772c"),
      // }
      // )
      // .toArray()

      .then((user) => {
        console.log(user);
        res.render("index", {
          user: user,
        });
      });
  });
});



//for creating
app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      .insertOne({
        name: req.body.name,
        age: +req.body.age,
      })
      .then((result) => {
        // console.log(result);
        res.redirect("/");
      });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));



                 
------------------------------------------------------------










nodejs 15


const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//connect database and node
const MongoClient = require("mongodb").MongoClient;
// const ObjectId = require("mongodb").ObjectId;
const app = express();

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));


//read
app.get("/", (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      //filter
      .findOne()
      // .find(
      // {
      // age: 20,
      //  _id: new ObjectId("636e99b956e396a4bc67772c"),
      // }
      // )
      // .toArray()

      .then((user) => {
        console.log(user);
        res.render("index", {
          user: user,
        });
      });
  });
});



//update
app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      .updateOne(
        {
          name: req.body.name,
        },
        {
          //mahjuze bel mongo
          $set: {
            age: +req.body.age,
          },
        }
      )
      .then((result) => {
        console.log(result);
        res.redirect("/");
      });
    // client.close();
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));




---------------------------------------------------







const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//connect database and node
const MongoClient = require("mongodb").MongoClient;
// const ObjectId = require("mongodb").ObjectId;
const app = express();

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));


//read
app.get("/", (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      //filter
      .findOne()
      // .find(
      // {
      // age: 20,
      //  _id: new ObjectId("636e99b956e396a4bc67772c"),
      // }
      // )
      // .toArray()

      .then((user) => {
        console.log(user);
        res.render("index", {
          user: user,
        });
      });
  });
});


//delete

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      .deleteOne({
        name: req.body.name,
      })
      .then((result) => {
        console.log(result);
        res.redirect("/");
      });
    // client.close();
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));

//crud
====================================================================


//                         filter



const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//connect database and node
const MongoClient = require("mongodb").MongoClient;
const ObjectId = require("mongodb").ObjectId;
const app = express();

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      .find({})
      // .limit(2)
      // .sort({})
      // .sort([])
      // .limit(2)
      // .skip(2)
      /*


          fi tari2ten na3mul filter fion
      .find({}, {
          limit:1 ,
          skip:2,
           ......
          }),



    fina hik
      .find({
          age: {
            $gt: 20  
            gte:30    greater than equal
            ne     not equal
            in     fi
            $ne: 333,
            $nin :[18,19,20]
            $in: [18, 19, 20],
           },
       })



        .find({
          $or:[{}]
          limit: 2,
          skip: 2,

          sort: {
           age: -1,
          name: 1,
          }


          sort: [
            ["age", -1],
            ["name", 1]],
        })
      */
      .toArray()
      .then((user) => {
        console.log(user);
        res.render("index", {
          user: user,
        });
      });
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  MongoClient.connect("mongodb://localhost:27017/firstDB", (err, client) => {
    const db = client.db();

    db.collection("users")
      .insertOne({
        name: req.body.name,
        age: +req.body.age,
      })
      .then((result) => {
        // console.log(result);
        res.redirect("/");
      });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));


===================================================