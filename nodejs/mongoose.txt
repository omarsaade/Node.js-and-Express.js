mongoose : odm
 object document member



 const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  res.render("index", {
    users: [],
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    // mongoose.connect(DB_URL, (err) => {
    console.log("connected to database");
    mongoose.disconnect();
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));


----------------------------------------

mongodb btetkawan men collections
  wkell collection btetkawan men majmu3a
  men documents

ana behfaz el data taba3e bi document w bheta bi collection 
m3ayane







video 16


const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  res.render("index", {
    users: [],
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    // mongoose.connect(DB_URL, (err) => {
    console.log("connected to database");
    mongoose.disconnect();
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));


==================================







CRUD Operation

videp 17

mongodb                    mongoose

collection :               models
documents:                 objects





                  Create



 const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  res.render("index", {
    users: [],
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    let newUser = new User({
      name: req.body.name,
      age: req.body.age,
    });


    //   Create  or insert one
    newUser.save((err, result) => {
      console.log(result);
      mongoose.disconnect();
      res.redirect("/");
    });


//insert manyy
// User.insertMany([{}])


  });
});

app.listen(3000, () => console.log("server listen on port 3000"));
                 


__________________________________



READ




const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {

    
    //   Read
    User.find((err, users) => {
      mongoose.disconnect();
      res.render("index", {
        users: users,
      });
    });
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    let newUser = new User({
      name: req.body.name,
      age: req.body.age,
    });
    //   Create
    newUser.save((err, result) => {
      console.log(result);
      mongoose.disconnect();
      res.redirect("/");
    });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));







===================================================================



const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    //   Read
    User.find(
      {
        _id: "637296e7ee00c9fcf01a1c7f",
      },
      (err, users) => {
        mongoose.disconnect();
        res.render("index", {
          users: users,
        });
      }
    );
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    let newUser = new User({
      name: req.body.name,
      age: req.body.age,
    });
    //   Create
    newUser.save((err, result) => {
      console.log(result);
      mongoose.disconnect();
      res.redirect("/");
    });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));





w fi findById('5ded.....')

___________________________________________________________________________








UPDATE


const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    //   Read
    User.find((err, users) => {
      mongoose.disconnect();
      res.render("index", {
        users: users,
      });
    });
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    User.updateOne(
      { name: req.body.name },
      { age: req.body.age },
      (err, result) => {
        mongoose.disconnect();
        res.redirect("/");
      }
    );
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));



------------------------------------------------



update (another method using find)




const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    //   Read
    User.find((err, users) => {
      mongoose.disconnect();
      res.render("index", {
        users: users,
      });
    });
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    User.findOne({ name: req.body.name }, (err, user) => {
      user.age = req.body.age;
      user.save((err) => {
        mongoose.disconnect();
        res.redirect("/");
      });
    });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));


------------------------------------------------------------


delete           



const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
//import mongoose
const mongoose = require("mongoose");
const app = express();

const DB_URL = "mongodb://localhost:27017/appDB";

//  ODM
let userSchema = mongoose.Schema({
  name: String,
  age: Number,
});

//Model  ODM
let User = mongoose.model("user", userSchema); //collection users baad ma t7awela

app.set("view engine", "ejs");
app.set("views", "views");

app.use(express.static(path.join(__dirname, "statics")));

app.get("/", (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    //   Read
    User.find((err, users) => {
      mongoose.disconnect();
      res.render("index", {
        users: users,
      });
    });
  });
});

app.post("/", bodyParser.urlencoded({ extended: true }), (req, res, next) => {
  mongoose.connect(DB_URL, { useNewUrlParser: true }, (err) => {
    User.deleteOne({ name: req.body.name }, (err, result) => {
      mongoose.disconnect();
      res.redirect("/");
    });
  });
});

app.listen(3000, () => console.log("server listen on port 3000"));
